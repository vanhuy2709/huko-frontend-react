/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as WorkRouteImport } from './routes/work';
import { Route as ProjectRouteImport } from './routes/project';
import { Route as ContactRouteImport } from './routes/contact';
import { Route as AboutRouteImport } from './routes/about';
import { Route as IndexRouteImport } from './routes/index';
import { Route as ProjectProjectIdRouteImport } from './routes/project_.$projectId';

const WorkRoute = WorkRouteImport.update({
  id: '/work',
  path: '/work',
  getParentRoute: () => rootRouteImport
} as any);
const ProjectRoute = ProjectRouteImport.update({
  id: '/project',
  path: '/project',
  getParentRoute: () => rootRouteImport
} as any);
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport
} as any);
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport
} as any);
const ProjectProjectIdRoute = ProjectProjectIdRouteImport.update({
  id: '/project_/$projectId',
  path: '/project/$projectId',
  getParentRoute: () => rootRouteImport
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/contact': typeof ContactRoute;
  '/project': typeof ProjectRoute;
  '/work': typeof WorkRoute;
  '/project/$projectId': typeof ProjectProjectIdRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/contact': typeof ContactRoute;
  '/project': typeof ProjectRoute;
  '/work': typeof WorkRoute;
  '/project/$projectId': typeof ProjectProjectIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/contact': typeof ContactRoute;
  '/project': typeof ProjectRoute;
  '/work': typeof WorkRoute;
  '/project_/$projectId': typeof ProjectProjectIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/about' | '/contact' | '/project' | '/work' | '/project/$projectId';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/about' | '/contact' | '/project' | '/work' | '/project/$projectId';
  id: '__root__' | '/' | '/about' | '/contact' | '/project' | '/work' | '/project_/$projectId';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutRoute: typeof AboutRoute;
  ContactRoute: typeof ContactRoute;
  ProjectRoute: typeof ProjectRoute;
  WorkRoute: typeof WorkRoute;
  ProjectProjectIdRoute: typeof ProjectProjectIdRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/work': {
      id: '/work';
      path: '/work';
      fullPath: '/work';
      preLoaderRoute: typeof WorkRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/project': {
      id: '/project';
      path: '/project';
      fullPath: '/project';
      preLoaderRoute: typeof ProjectRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/contact': {
      id: '/contact';
      path: '/contact';
      fullPath: '/contact';
      preLoaderRoute: typeof ContactRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/project_/$projectId': {
      id: '/project_/$projectId';
      path: '/project/$projectId';
      fullPath: '/project/$projectId';
      preLoaderRoute: typeof ProjectProjectIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  ProjectRoute: ProjectRoute,
  WorkRoute: WorkRoute,
  ProjectProjectIdRoute: ProjectProjectIdRoute
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
